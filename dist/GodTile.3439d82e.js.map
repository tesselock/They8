{"version":3,"sources":["GodTile.js"],"names":["GodTile","JSONCard","id","name","img","desc","location","glory","infamy","IsUsed","loc","newGlo","getIsUsed","newInf","setInfamy","Infamy","range","Math","floor","random","Phase","inGameTiles","Players","Deck","setIsUsed","playerHands","i","length","removed","removeHand","j","deck","push","shuffle","deal","getLoc","Player","getUsername","getTurn","addActionCard","getCard","chosenCard1","getHand","pickRandom","removedCard","removeCard","chosenCard","getID","console","log","chosenCard2","toDisplay","getIndex","filter","item","nextTile","chosenTile","temp","getGlory","setGlory","getInfamy","targets","randomTarget","getName","playTile"],"mappings":"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","file":"GodTile.3439d82e.js","sourceRoot":"..","sourcesContent":["class GodTile{\r\n  constructor(JSONCard) {\r\n    this.id = JSONCard.id;\r\n    this.name = JSONCard.name;\r\n    this.img = JSONCard.img;\r\n    this.desc = JSONCard.desc;\r\n    this.location = JSONCard.location;\r\n      this.glory = 1;\r\n      this.infamy = 2;\r\n      this.IsUsed = false;\r\n     }\r\n\r\n  getName(){\r\n    return this.name;\r\n  }\r\n\r\n  getID(){\r\n    return this.id;\r\n  }\r\n\r\n  getImg(){\r\n    return this.name;\r\n  }\r\n\r\n  getDesc(){\r\n    return this.desc;\r\n  }\r\n\r\n  getLoc(){\r\n    return this.location;\r\n  }\r\n\r\n  setLoc(loc){\r\n    this.location = loc;\r\n  }\r\n\r\n  getGlory(){\r\n    return this.glory;\r\n  }\r\n\r\n  setGlory(newGlo){\r\n    if(this.id === 8 && this.getIsUsed())\r\n      return;\r\n    this.glory = newGlo;\r\n  }\r\n\r\n  getScore(){\r\n    return this.glory*2-this.infamy;\r\n  }\r\n\r\n  getInfamy(){\r\n    return this.infamy;\r\n  }\r\n\r\n  setInfamy(newInf){\r\n    if(this.id === 8 && this.getIsUsed())\r\n      return;\r\n    this.infamy = newInf;\r\n  }\r\n\r\n  getIsUsed(){\r\n    return this.IsUsed;\r\n  }\r\n\r\n  setIsUsed(){\r\n    if(this.id === 8 && this.getIsUsed())\r\n      return;\r\n    this.IsUsed = !this.IsUsed;\r\n    if(this.IsUsed) //if the God Tile has been used\r\n      this.setInfamy(this.Infamy++);\r\n    else //if the God Tile has been set back to False\r\n      this.setInfamy(this.Infamy--);\r\n  }\r\n\r\n  getLoc(){\r\n    return this.location;\r\n  }\r\n\r\n  pickRandom(range){\r\n    return Math.floor(Math.random()*range);\r\n  }\r\n\r\n  playTile(Phase,inGameTiles,Players,Deck){ //may very likely have to pass in an instance of Game\r\n    if(this.getIsUsed())\r\n      return;\r\n    switch(Phase){\r\n\r\n      case \"Start\": //PRAXIS\r\n          this.setIsUsed();\r\n          return;\r\n\r\n      case \"Before Player Action\":\r\n        if(this.id === 1){ //ANATOC\r\n          var playerHands = new Deck(\"none\");\r\n\r\n          for(var i = 0; i < Players.length; i++){ //pushing all cards onto deck\r\n            var removed = Players[i].removeHand();\r\n            for(var j = 0; j < removed.length; j++)\r\n              playerHands.deck.push(removed[j]);\r\n          }\r\n          playerHands.shuffle(); //shuffling all of their hands\r\n          playerHands.deal(3, Players,\"ActionCards\");\r\n          this.setIsUsed();\r\n        }\r\n\r\n        else if(this.id === 5){//ENDYMINA\r\n          for(var i = 0; i < Players.length; i++){\r\n            if(this.getLoc() === Player[i].getUsername() && !Player[i].getTurn()){\r\n                Player[i].addActionCard(Deck.getCard(0));\r\n                Player[i].addActionCard(Deck.getCard(0));\r\n\r\n\r\n\r\n                //to be changed once finalize user choices\r\n                var chosenCard1 = Player[i].getHand()[pickRandom(Player[i].getHand().length)];\r\n                //rest of code should be good\r\n\r\n\r\n\r\n                var removedCard = Player[i].removeCard(chosenCard.getID());\r\n                console.log(\"Removed Card:\", removedCard)\r\n                Player[i].addActionCard(chosenCard1);\r\n\r\n                //to be changed once finalize user choices\r\n                var chosenCard2 = Player[i].getHand()[pickRandom(Player[i].getHand().length)];\r\n                //rest of code should be good\r\n\r\n                removedCard = Player[i].removeCard(chosenCard.getID());\r\n                console.log(\"Removed Card:\", removedCard)\r\n                Player[i].addActionCard(chosenCard2);\r\n                this.setIsUsed();\r\n                return;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"Renewal\":\r\n        if(this.id === 6){//NANOS, IMPLEMENTED IN GAME LOOP\r\n          this.setIsUsed();\r\n        }\r\n        else if(this.id === 4){//CYMELE\r\n          for(var i = 0; i < Players.length; i++){\r\n            if(this.getLoc() === Players[i].getUsername()){\r\n              var toDisplay = [];\r\n\r\n              for(var i = 0; i < 4; i++)\r\n                toDisplay.push(Deck.getIndex(0));\r\n\r\n              //display cards somehow, this part will be changed once we figure out how to display and log user choice\r\n              var chosenCard = toDisplay[pickRandom(4)];\r\n              //end of unfinalized code\r\n\r\n              Player[i].addActionCard(chosenCard);\r\n              for(var j = 0; j < toDisplay.length; j++){\r\n                Deck.deck.push(toDisplay[0])\r\n                toDisplay = toDisplay.filter(item => item !== toDisplay[0]);\r\n              }\r\n              this.setIsUsed();\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        if(this.id === 2){//ARISTIPHANE\r\n          var nextTile, chosenTile;\r\n\r\n          //have player pick two godTiles from godTiles\r\n          chosenTile = inGameTiles[pickRandom(inGameTiles.length)];\r\n          do{\r\n            nextTile = inGameTiles[pickRandom(inGameTiles.length)];\r\n          }\r\n          while(nextTile === chosenTile)\r\n          //end of user Selection\r\n\r\n          //swapping Glory\r\n          var temp = nextTile.getGlory();\r\n          nextTile.setGlory(chosenTile.getGlory());\r\n          chosenTile.setGlory(temp);\r\n          //swapping Infamy\r\n          var temp = nextTile.getInfamy();\r\n          nextTile.setInfamy(chosenTile.getInfamy());\r\n          chosenTile.setInfamy(temp);\r\n          this.setIsUsed();\r\n          return;\r\n        }\r\n      else if(this.id === 3){//CASSANA\r\n        var targets = [];\r\n        for(var i = 0; i < inGameTiles.length; i++){\r\n          if(inGameTiles[i].getGlory() > 4)\r\n            targets.push(inGameTiles[i]);\r\n          }\r\n        //display targets, this block is subject to change\r\n        if(targets.length != 0){\r\n\r\n          //picking random choice\r\n          var randomTarget = pickRandom(targets.length);\r\n          //end of random choice\r\n\r\n          targets[randomTarget].setGlory(targets[randomTarget].getGlory+1);\r\n          this.setIsUsed();\r\n        }\r\n        return;\r\n      }\r\n     else if(this.id === 7){//PITON\r\n       var targets = [];\r\n       for(var i = 0; i < inGameTiles.length; i++){\r\n         if(!inGameTiles[i].getIsUsed())\r\n           targets.push(inGameTiles[i]);\r\n         }\r\n       if(targets.length != 0){\r\n\r\n         //picking random choice, this should be the player's choice\r\n          var randomTarget = pickRandom(targets.length);\r\n          //end of to be changed code\r\n\r\n          console.log(\"chose to use\",targets[randomTarget].getName()+\"\\'s power\");\r\n          this.id = targets[randomTarget].getID();\r\n          this.playTile(Phase,inGameTiles,Players,Deck) //recursive call with new id to use power of chosen Tile\r\n          this.id = 7;\r\n         }\r\n           return;\r\n     }\r\n     else if(this.id === 9){//RYMON\r\n       //need to do a check within the game in order to call the method, will have to add buzzer for user at the moment in which actionCard is Played\r\n     }\r\n        break;\r\n    }\r\n  }\r\n}\r\n"]}