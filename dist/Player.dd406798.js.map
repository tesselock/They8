{"version":3,"sources":["Player.js"],"names":["Player","Username","username","hand","godTiles","turn","console","log","GodTile","push","setLoc","ActionCard","id","i","length","getID","side","removedCard","filter","item","removed","pop","GodsInGame","playableCards","identifyTargets","range","Math","floor","random","Deck","getPlayableCards","glory","infamy","randomIndex","getRandomIndex","targets","initial","destination","nextDestination","getName","getGlory","getInfamy","possibleDest","initialLength","playActionCard3","discard","removeActionCard","infamyTargets","gloryTargets","playActionCard2","randomTarget","playActionCard"],"mappings":"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","file":"Player.dd406798.js","sourceRoot":"..","sourcesContent":["class Player{\r\n\r\n  constructor(Username){\r\n    this.username = Username;\r\n    this.hand = []; //holds the action card in the Player's hand\r\n    this.godTiles = []; //godTiles[0] === left God Tile, godTiles[1] == right God Tile\r\n    this.turn = false;\r\n  }\r\n\r\n  buzzer(){\r\n    console.log(\"ACTIVATE YOUR GOD TILES\"); //to be changed to a message statement that can be output to the user\r\n    /*\r\n\r\n      need to implement playTiles in GodTiles before running function\r\n\r\n    */\r\n  }\r\n\r\n  getUsername(){\r\n      return this.username;\r\n  }\r\n\r\n  addGodTile(GodTile){\r\n    this.godTiles.push(GodTile);\r\n    GodTile.setLoc(this.username);\r\n  }\r\n\r\n  addActionCard(ActionCard){ //running into conflict where location of actionCard is not being set properly, needs review\r\n    this.hand.push(ActionCard);\r\n    ActionCard.setLoc(this.username);\r\n  }\r\n\r\n  getActionCard(id){\r\n    for(var i = 0; i < hand.length; i++){\r\n        if(this.hand[i].getID() === id)\r\n          return this.hand[i];\r\n    }\r\n  }\r\n\r\n  getHand(){\r\n    return this.hand;\r\n  }\r\n\r\n  getGodTile(side){\r\n      return this.godTiles[side];\r\n  }\r\n\r\n  removeActionCard(id){\r\n    var removedCard;\r\n    for(var i = 0; i < this.hand.length; i++){\r\n        if(this.hand[i].getID() === id){\r\n          removedCard = this.hand[i];\r\n          this.hand[i].setLoc(\"Discard\");\r\n          this.hand = this.hand.filter(item => item !== this.hand[i]);\r\n        }\r\n    }\r\n    return removedCard;\r\n  }\r\n\r\n  removeHand(){\r\n    var removed = [];\r\n    for(var i = this.hand.length - 1; i > -1; i--){\r\n      removed.push(this.hand[i]);\r\n      this.hand[i].setLoc(\"Discard\");\r\n      this.hand.pop();\r\n    }\r\n    return removed\r\n  }\r\n\r\n  getPlayableCards(GodsInGame){\r\n    var playableCards = [];\r\n    for(var i = 0; i < this.hand.length; i++){\r\n\r\n      if(this.hand[i].identifyTargets(GodsInGame).length != 0)\r\n        playableCards.push(this.hand[i]);\r\n\r\n    }\r\n    return playableCards;\r\n  }\r\n\r\n  isTurn(){\r\n    return this.turn;\r\n  }\r\n\r\n  setTurn(){\r\n    this.turn != this.turn;\r\n  }\r\n\r\n  getLeftGodTile(){\r\n    return this.godTiles[0];\r\n  }\r\n\r\n  getRightGodTile(){\r\n    return this.godTiles[1];\r\n  }\r\n\r\n  getRandomIndex(range){\r\n    return Math.floor(Math.random() * range);\r\n  }\r\n\r\n  gamePlay(GodsInGame, Deck){\r\n      var playableCards = this.getPlayableCards(GodsInGame);\r\n      for(var i = 0; i < playableCards.length; i++){\r\n        if(playableCards[i].getID() === 14 && Deck.glory === Deck.infamy){\r\n          playableCards = playableCards.filter(item => item != playableCards[i]);\r\n          break;\r\n        }\r\n      }\r\n      console.log(playableCards);\r\n      if(playableCards.length > 0){\r\n\r\n          //code will need to be changed to be able to take userInput on Selection of Card\r\n        console.log(\"Randomly choosing a card to Play\");\r\n        var randomIndex = this.getRandomIndex(playableCards.length);\r\n        console.log(\"Chosen card to play is:\",playableCards[randomIndex]);\r\n        var targets = playableCards[randomIndex].identifyTargets(GodsInGame);\r\n        //end of needed to be changed code\r\n\r\n        var initial, destination, nextDestination;\r\n\r\n          if(playableCards[randomIndex].getID() === 11){ //requires 3 targets\r\n            console.log(\"Entering 3 target selection...\")\r\n\r\n            //this section requires user choice\r\n            console.log(\"Choose left or right GodTile\");\r\n            initial = this.godTiles[this.getRandomIndex(2)];\r\n            console.log(\"Chosen Tile is:\",initial.getName());\r\n            console.log(\"Tile before action:\");\r\n            console.log(\"   Glory:\",initial.getGlory());\r\n            console.log(\"   Infamy:\",initial.getInfamy());\r\n            //end of first choice\r\n\r\n\r\n            var possibleDest = GodsInGame.filter(item => item !== initial);\r\n            var initialLength = possibleDest.length;\r\n            for(var i = 0; i < initialLength; i++){\r\n              possibleDest = possibleDest.filter(item => item != this.godTiles[0]);\r\n              if (possibleDest.length != initialLength)\r\n                break;\r\n              possibleDest = possibleDest.filter(item => item != this.godTiles[1]);\r\n              if (possibleDest.length != initialLength)\r\n                break;\r\n            }\r\n\r\n\r\n            //requires second input\r\n            console.log(\"Choose destination for Glory\");\r\n            destination = possibleDest[this.getRandomIndex(possibleDest.length)];\r\n            console.log(\"Chosen Tile is:\",destination.getName());\r\n            console.log(\"Tile before action:\");\r\n            console.log(\"   Glory:\",destination.getGlory());\r\n            console.log(\"   Infamy:\",destination.getInfamy());\r\n            //end of second input\r\n\r\n\r\n            possibleDest = possibleDest.filter(item => item != destination);\r\n\r\n\r\n            //requires third input\r\n            console.log(\"Choose destination for Infamy\");\r\n            nextDestination = possibleDest[getRandomIndex(possibleDest.length)];\r\n            console.log(\"Chosen Tile is:\",nextDestination.getName());\r\n            console.log(\"Tile before action:\");\r\n            console.log(\"   Glory:\",nextDestination.getGlory());\r\n            console.log(\"   Infamy:\",nextDestination.getInfamy());\r\n            //end of third input\r\n\r\n\r\n            playableCards[randomIndex].playActionCard3(initial, destination, nextDestination, Deck);\r\n\r\n            console.log(initial.getName(),\"after action:\");\r\n            console.log(\"   Glory:\",initial.getGlory());\r\n            console.log(\"   Infamy:\",initial.getInfamy());\r\n            console.log(destination.getName(),\"after action:\");\r\n            console.log(\"   Glory:\",destination.getGlory());\r\n            console.log(\"   Infamy:\",destination.getInfamy());\r\n            console.log(nextDestination.getName(),\"after action:\");\r\n            console.log(\"   Glory:\",nextDestination.getGlory());\r\n            console.log(\"   Infamy:\",nextDestination.getInfamy());\r\n            Deck.discard.push(playableCards[randomIndex]);\r\n            this.removeActionCard(playableCards[randomIndex].getID());\r\n          }\r\n\r\n          else if(playableCards[randomIndex].getID() === 2 || playableCards[randomIndex].getID() === 4 || playableCards[randomIndex].getID() === 6){ //requires 2 targets\r\n            console.log(\"Entering 2 target selection...\");\r\n            if(playableCards[randomIndex].getID() === 6){\r\n              console.log(\"using card with ID 6\")\r\n              var infamyTargets = [];\r\n              var gloryTargets = [];\r\n              for(var i = 0; i < targets.length; i++){\r\n                if(targets[i].getInfamy() > 0)\r\n                  infamyTargets.push(targets[i]);\r\n                if(targets[i].getGlory() > 0)\r\n                  gloryTargets.push(targets[i]);\r\n              }\r\n\r\n              if(gloryTargets.length === 0 || infamyTargets.length === 0){\r\n                console.log(\"not enough targets in glory or infamy set of targets\");\r\n                return;\r\n              }\r\n\r\n\r\n              //will change because we need to take in user input with glory targets\r\n              console.log(\"choose target to gain Glory and lose Infamy\");\r\n              initial = infamyTargets[this.getRandomIndex(infamyTargets.length)];\r\n              console.log(\"Chosen Tile is:\",initial.getName());\r\n              console.log(\"Tile before action:\");\r\n              console.log(\"   Glory:\",initial.getGlory());\r\n              console.log(\"   Infamy:\",initial.getInfamy());\r\n              //end of changes\r\n\r\n              infamyTargets = infamyTargets.filter(item => item != initial);\r\n\r\n              if(infamyTargets.length === 0){\r\n                console.log(\"not enough targets in glory or infamy set of targets\");\r\n                return;\r\n              }\r\n\r\n              //will change based on user input\r\n              console.log(\"choose target to gain Infamy and lose glory\");\r\n              destination = gloryTargets[this.getRandomIndex(gloryTargets.length)];\r\n              console.log(\"Chosen Tile is:\",destination.getName());\r\n              console.log(\"Tile before action:\");\r\n              console.log(\"   Glory:\",destination.getGlory());\r\n              console.log(\"   Infamy:\",destination.getInfamy());\r\n              //will change based on user input\r\n\r\n              playableCards[randomIndex].playActionCard2(initial,destination, Deck);\r\n              console.log(initial.getName(),\"after action:\");\r\n              console.log(\"   Glory:\",initial.getGlory());\r\n              console.log(\"   Infamy:\",initial.getInfamy());\r\n              console.log(destination.getName(),\"after action:\");\r\n              console.log(\"   Glory:\",destination.getGlory());\r\n              console.log(\"   Infamy:\",destination.getInfamy());\r\n              Deck.discard.push(playableCards[randomIndex]);\r\n              this.removeActionCard(playableCards[randomIndex].getID());\r\n          }\r\n\r\n          else{\r\n            console.log(\"using card with ID 2 or 4\")\r\n            //to be changed, takes in first input\r\n            var randomTarget = this.getRandomIndex(targets.length)\r\n            initial = targets[randomTarget];\r\n            console.log(\"Chosen Tile is:\",initial.getName());\r\n            console.log(\"   Glory:\",initial.getGlory());\r\n            console.log(\"   Infamy:\",initial.getInfamy());\r\n            //end of first input\r\n\r\n            possibleDest = GodsInGame.filter(item => item !== initial);\r\n\r\n            //choosing second destination, requires user input\r\n            console.log(\"choosing random destination\");\r\n            destination = possibleDest[this.getRandomIndex(possibleDest.length)];\r\n            console.log(\"Chosen Tile is:\",destination.getName());\r\n            console.log(\"Tile before action:\");\r\n            console.log(\"   Glory:\",destination.getGlory());\r\n            console.log(\"   Infamy:\",destination.getInfamy());\r\n            //end of second input\r\n\r\n            playableCards[randomIndex].playActionCard2(initial,destination,Deck);\r\n            console.log(\"initial Tile after action:\");\r\n            console.log(\"   Glory:\",initial.getGlory());\r\n            console.log(\"   Infamy:\",initial.getInfamy());\r\n            console.log(\"Destination Tile after action:\");\r\n            console.log(\"   Glory:\",destination.getGlory());\r\n            console.log(\"   Infamy:\",destination.getInfamy());\r\n            Deck.discard.push(playableCards[randomIndex]);\r\n            this.removeActionCard(playableCards[randomIndex].getID());\r\n          }\r\n        }\r\n\r\n        else{\r\n          console.log(\"Entering 1 target selection...\")\r\n          //userInput\r\n          console.log(\"Choosing random target\");\r\n          destination =  targets[this.getRandomIndex(targets.length)];\r\n          console.log(\"Chosen Tile is\",destination.getName());\r\n          console.log(\"Tile before action:\");\r\n          console.log(\"   Glory:\",destination.getGlory());\r\n          console.log(\"   Infamy:\",destination.getInfamy());\r\n          //end of user Input\r\n          playableCards[randomIndex].playActionCard(destination, Deck);\r\n          console.log(\"Tile after action:\");\r\n          console.log(\"   Glory:\",destination.getGlory());\r\n          console.log(\"   Infamy:\",destination.getInfamy());\r\n          Deck.discard.push(playableCards[randomIndex]);\r\n          this.removeActionCard(playableCards[randomIndex].getID());\r\n        }\r\n        return true;\r\n      }\r\n\r\n    else{\r\n      console.log(\"No Cards currently playable\");\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]}